name: CI/CD Docker SpringBoot

on:

  workflow_dispatch:

  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Generate application.yml
        run: |
          mkdir -p ./src/main/resources
          touch ./src/main/resources/application.yml
          printf '%s' "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
        shell: bash

      - name: Build with gradle
        run: ./gradlew build -x test

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ssulost-server . --no-cache

      - name: Publish Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/ssulost-server

      - name: Deploy on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_SERVER_HOST }}
          username: ${{ secrets.EC2_SERVER_USER }}
          key: ${{ secrets.EC2_SERVER_KEY }}
          script: |
            cd /home/ubuntu/bongbaek-server
            
            export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            
            CURRENT_CONF=$(sudo readlink /etc/nginx/sites-enabled/current || echo "")
            
            if [[ "$CURRENT_CONF" == *"blue"* ]]; then
              NEW_SERVICE="green"
              OLD_SERVICE="blue"
              NEW_CONF="/etc/nginx/sites-available/green.conf"
              NEW_PORT=8081
            else
              NEW_SERVICE="blue"
              OLD_SERVICE="green"
              NEW_CONF="/etc/nginx/sites-available/blue.conf"
              NEW_PORT=8080
            fi
            
            echo "ðŸš€ Removing old $NEW_SERVICE container (if exists)..."
            docker compose rm -f $NEW_SERVICE || true
            
            echo "ðŸš€ Starting $NEW_SERVICE..."
            docker compose up -d $NEW_SERVICE

            echo "ðŸ”„ Switching Nginx to $NEW_SERVICE"
            sudo ln -sf $NEW_CONF /etc/nginx/sites-enabled/current
            sudo systemctl reload nginx
            
            echo "ðŸšª Stopping and removing old $OLD_SERVICE container"
            docker compose stop $OLD_SERVICE || true
            docker compose rm -f $OLD_SERVICE || true
            docker image prune -f
