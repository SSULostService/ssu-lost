name: CI/CD Docker SpringBoot

on:

  workflow_dispatch:

  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Generate application.yml
        run: |
          mkdir -p ./src/main/resources
          touch ./src/main/resources/application.yml
          printf '%s' "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
        shell: bash

      - name: Build with gradle
        run: ./gradlew build -x test

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ssulost-server . --no-cache

      - name: Publish Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/ssulost-server

      - name: Ensure remote dir
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SERVER_KEY }}
          script: |
            mkdir -p /home/ubuntu/bongbaek-server

      - name: Upload files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SERVER_KEY }}
          source: "./docker-compose.yml,./proxy"
          target: "/home/ubuntu/bongbaek-server"
          rm: true       # <-- 기존 폴더/파일 삭제 후 업로드

      - name: Deploy on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_SERVER_HOST }}
          username: ${{ secrets.EC2_SERVER_USER }}
          key: ${{ secrets.EC2_SERVER_KEY }}
          script: |
            cd /home/ubuntu/bongbaek-server

            export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}

            # 새 이미지 pull
            docker pull $DOCKER_USERNAME/ssulost-server:latest

            # === 1️⃣ green 배포 ===
            docker compose up -d green

            SUCCESS=0
            for i in {1..20}; do
            if curl -fs "http://localhost:${PORT_NEW}/actuator/health" 2>/dev/null | grep -q '"status":"UP"'; then
            SUCCESS=1
            break
            fi
            echo "  …health ${i}/20"
            sleep 5
            done
            
            if [ "$SUCCESS" -ne 1 ]; then
            echo "[ERROR] Health check failed on :${PORT_NEW}"
            ROLLBACK=1
            fi

            # === 2️⃣ blue 배포 ===
            docker compose up -d blue

            # blue 헬스체크 완료 대기
            echo "Waiting for blue-container health..."
            until [ "$(docker inspect -f '{{.State.Health.Status}}' blue-container)" = "healthy" ]; do
                sleep 5
            done
            echo "blue-container is healthy ✅"

            # Nginx reload
            docker compose up -d nginx
